// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AlarmServiceClient is the client API for AlarmService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlarmServiceClient interface {
	GetAlarm(ctx context.Context, in *AlarmGetRequest, opts ...grpc.CallOption) (AlarmService_GetAlarmClient, error)
}

type alarmServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAlarmServiceClient(cc grpc.ClientConnInterface) AlarmServiceClient {
	return &alarmServiceClient{cc}
}

func (c *alarmServiceClient) GetAlarm(ctx context.Context, in *AlarmGetRequest, opts ...grpc.CallOption) (AlarmService_GetAlarmClient, error) {
	stream, err := c.cc.NewStream(ctx, &AlarmService_ServiceDesc.Streams[0], "/banking.alarm.AlarmService/GetAlarm", opts...)
	if err != nil {
		return nil, err
	}
	x := &alarmServiceGetAlarmClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type AlarmService_GetAlarmClient interface {
	Recv() (*AlarmGetReply, error)
	grpc.ClientStream
}

type alarmServiceGetAlarmClient struct {
	grpc.ClientStream
}

func (x *alarmServiceGetAlarmClient) Recv() (*AlarmGetReply, error) {
	m := new(AlarmGetReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AlarmServiceServer is the server API for AlarmService service.
// All implementations must embed UnimplementedAlarmServiceServer
// for forward compatibility
type AlarmServiceServer interface {
	GetAlarm(*AlarmGetRequest, AlarmService_GetAlarmServer) error
	mustEmbedUnimplementedAlarmServiceServer()
}

// UnimplementedAlarmServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAlarmServiceServer struct {
}

func (UnimplementedAlarmServiceServer) GetAlarm(*AlarmGetRequest, AlarmService_GetAlarmServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAlarm not implemented")
}
func (UnimplementedAlarmServiceServer) mustEmbedUnimplementedAlarmServiceServer() {}

// UnsafeAlarmServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlarmServiceServer will
// result in compilation errors.
type UnsafeAlarmServiceServer interface {
	mustEmbedUnimplementedAlarmServiceServer()
}

func RegisterAlarmServiceServer(s grpc.ServiceRegistrar, srv AlarmServiceServer) {
	s.RegisterService(&AlarmService_ServiceDesc, srv)
}

func _AlarmService_GetAlarm_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(AlarmGetRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlarmServiceServer).GetAlarm(m, &alarmServiceGetAlarmServer{stream})
}

type AlarmService_GetAlarmServer interface {
	Send(*AlarmGetReply) error
	grpc.ServerStream
}

type alarmServiceGetAlarmServer struct {
	grpc.ServerStream
}

func (x *alarmServiceGetAlarmServer) Send(m *AlarmGetReply) error {
	return x.ServerStream.SendMsg(m)
}

// AlarmService_ServiceDesc is the grpc.ServiceDesc for AlarmService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AlarmService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "banking.alarm.AlarmService",
	HandlerType: (*AlarmServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAlarm",
			Handler:       _AlarmService_GetAlarm_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "alarm.proto",
}
